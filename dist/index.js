#!/usr/bin/env node
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _sourceMapSupport = require('source-map-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport.install)();

var PouchService = require('./pouchService'),
    remoteServer = 'http://couchdb.fairhursts.net:5984',
    watchedDb = 'visits',
    completedDb = 'completed-visits';

var watchedDatabase = new PouchService(watchedDb, remoteServer); //TODO: handle as array
var completedDatabase = new PouchService(completedDb, remoteServer);

// Ignore deleted records
var processChange = function processChange(change) {
    if (change.doc && !change.doc._deleted) {
        testForCompleted(change.doc);
    }
};

// Filter completed records
var testForCompleted = function testForCompleted(doc) {
    if (doc.status && doc.status === 'completed') {
        moveRecord(doc);
    }
};

// Move record into completed queue
var moveRecord = function moveRecord(doc) {
    completedDatabase.add(doc).then(removeIfNoError(doc._id)).then(watchedDatabase.remove(doc._id)).then(console.log('Assessment ' + doc._id + ' was completed at ' + new Date().toISOString())).catch(function (err) {
        return console.log('Completed record was not moved: ', doc._id, ' : ', err);
    });
};

// Ensure that record exists in completed database before removing
var removeIfNoError = function removeIfNoError(id) {
    return new _promise2.default(function (resolve, reject) {
        console.log('fetching', id);
        completedDatabase.fetch(id).then(function (doc) {
            return doc;
        }).then(function (result) {
            resolve(result);
        }).catch(function (err) {
            reject(err);
        });
    });
};

// Subcribe to any changes in the local database
watchedDatabase.subscribe(processChange);

// Calling Sync() will grab a full dataset from the server
// and create an open event listener that keeps this app alive
watchedDatabase.sync();
completedDatabase.sync();

removeIfNoError('doesnotexist');

console.log('MFA Processing Service Running...');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQb3VjaFNlcnZpY2UiLCJyZXF1aXJlIiwicmVtb3RlU2VydmVyIiwid2F0Y2hlZERiIiwiY29tcGxldGVkRGIiLCJ3YXRjaGVkRGF0YWJhc2UiLCJjb21wbGV0ZWREYXRhYmFzZSIsInByb2Nlc3NDaGFuZ2UiLCJjaGFuZ2UiLCJkb2MiLCJfZGVsZXRlZCIsInRlc3RGb3JDb21wbGV0ZWQiLCJzdGF0dXMiLCJtb3ZlUmVjb3JkIiwiYWRkIiwidGhlbiIsInJlbW92ZUlmTm9FcnJvciIsIl9pZCIsInJlbW92ZSIsImNvbnNvbGUiLCJsb2ciLCJEYXRlIiwidG9JU09TdHJpbmciLCJjYXRjaCIsImVyciIsImlkIiwicmVzb2x2ZSIsInJlamVjdCIsImZldGNoIiwicmVzdWx0Iiwic3Vic2NyaWJlIiwic3luYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7Ozs7QUFDQTs7QUFFQSxJQUFNQSxlQUFlQyxRQUFRLGdCQUFSLENBQXJCO0FBQUEsSUFDSUMsZUFBZSxvQ0FEbkI7QUFBQSxJQUVJQyxZQUFZLFFBRmhCO0FBQUEsSUFHSUMsY0FBYyxrQkFIbEI7O0FBS0EsSUFBTUMsa0JBQWtCLElBQUlMLFlBQUosQ0FBaUJHLFNBQWpCLEVBQTRCRCxZQUE1QixDQUF4QixDLENBQXdFO0FBQ3hFLElBQU1JLG9CQUFvQixJQUFJTixZQUFKLENBQWlCSSxXQUFqQixFQUE4QkYsWUFBOUIsQ0FBMUI7O0FBRUE7QUFDQSxJQUFNSyxnQkFBZ0IsU0FBaEJBLGFBQWdCLENBQUNDLE1BQUQsRUFBWTtBQUM5QixRQUFJQSxPQUFPQyxHQUFQLElBQWMsQ0FBQ0QsT0FBT0MsR0FBUCxDQUFXQyxRQUE5QixFQUF3QztBQUFFQyx5QkFBaUJILE9BQU9DLEdBQXhCO0FBQThCO0FBQzNFLENBRkQ7O0FBSUE7QUFDQSxJQUFNRSxtQkFBbUIsU0FBbkJBLGdCQUFtQixDQUFDRixHQUFELEVBQVM7QUFDOUIsUUFBSUEsSUFBSUcsTUFBSixJQUFlSCxJQUFJRyxNQUFKLEtBQWUsV0FBbEMsRUFBZ0Q7QUFBRUMsbUJBQVdKLEdBQVg7QUFBaUI7QUFDdEUsQ0FGRDs7QUFJQTtBQUNBLElBQU1JLGFBQWEsU0FBYkEsVUFBYSxDQUFDSixHQUFELEVBQVM7QUFDeEJILHNCQUFrQlEsR0FBbEIsQ0FBc0JMLEdBQXRCLEVBQ0tNLElBREwsQ0FDVUMsZ0JBQWdCUCxJQUFJUSxHQUFwQixDQURWLEVBRUtGLElBRkwsQ0FFVVYsZ0JBQWdCYSxNQUFoQixDQUF1QlQsSUFBSVEsR0FBM0IsQ0FGVixFQUdLRixJQUhMLENBR1VJLFFBQVFDLEdBQVIsQ0FBWSxnQkFBZ0JYLElBQUlRLEdBQXBCLEdBQTBCLG9CQUExQixHQUFpRCxJQUFJSSxJQUFKLEdBQVdDLFdBQVgsRUFBN0QsQ0FIVixFQUlLQyxLQUpMLENBSVcsVUFBQ0MsR0FBRDtBQUFBLGVBQVNMLFFBQVFDLEdBQVIsQ0FBWSxrQ0FBWixFQUFnRFgsSUFBSVEsR0FBcEQsRUFBeUQsS0FBekQsRUFBZ0VPLEdBQWhFLENBQVQ7QUFBQSxLQUpYO0FBS0gsQ0FORDs7QUFRQTtBQUNBLElBQU1SLGtCQUFrQixTQUFsQkEsZUFBa0IsQ0FBQ1MsRUFBRCxFQUFRO0FBQzVCLFdBQU8sc0JBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3BDUixnQkFBUUMsR0FBUixDQUFZLFVBQVosRUFBd0JLLEVBQXhCO0FBQ0FuQiwwQkFBa0JzQixLQUFsQixDQUF3QkgsRUFBeEIsRUFDS1YsSUFETCxDQUNVLGVBQU87QUFBRSxtQkFBT04sR0FBUDtBQUFZLFNBRC9CLEVBRUtNLElBRkwsQ0FFVSxrQkFBVTtBQUFFVyxvQkFBUUcsTUFBUjtBQUFpQixTQUZ2QyxFQUdLTixLQUhMLENBR1csVUFBQ0MsR0FBRCxFQUFTO0FBQUVHLG1CQUFPSCxHQUFQO0FBQWEsU0FIbkM7QUFJSCxLQU5NLENBQVA7QUFPSCxDQVJEOztBQVVBO0FBQ0FuQixnQkFBZ0J5QixTQUFoQixDQUEwQnZCLGFBQTFCOztBQUVBO0FBQ0E7QUFDQUYsZ0JBQWdCMEIsSUFBaEI7QUFDQXpCLGtCQUFrQnlCLElBQWxCOztBQUVBZixnQkFBZ0IsY0FBaEI7O0FBRUFHLFFBQVFDLEdBQVIsQ0FBWSxtQ0FBWiIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgaW5zdGFsbCB9IGZyb20gJ3NvdXJjZS1tYXAtc3VwcG9ydCc7XG5pbnN0YWxsKCk7XG5cbmNvbnN0IFBvdWNoU2VydmljZSA9IHJlcXVpcmUoJy4vcG91Y2hTZXJ2aWNlJyksXG4gICAgcmVtb3RlU2VydmVyID0gJ2h0dHA6Ly9jb3VjaGRiLmZhaXJodXJzdHMubmV0OjU5ODQnLFxuICAgIHdhdGNoZWREYiA9ICd2aXNpdHMnLFxuICAgIGNvbXBsZXRlZERiID0gJ2NvbXBsZXRlZC12aXNpdHMnXG5cbmNvbnN0IHdhdGNoZWREYXRhYmFzZSA9IG5ldyBQb3VjaFNlcnZpY2Uod2F0Y2hlZERiLCByZW1vdGVTZXJ2ZXIpICAgICAgIC8vVE9ETzogaGFuZGxlIGFzIGFycmF5XG5jb25zdCBjb21wbGV0ZWREYXRhYmFzZSA9IG5ldyBQb3VjaFNlcnZpY2UoY29tcGxldGVkRGIsIHJlbW90ZVNlcnZlcilcblxuLy8gSWdub3JlIGRlbGV0ZWQgcmVjb3Jkc1xuY29uc3QgcHJvY2Vzc0NoYW5nZSA9IChjaGFuZ2UpID0+IHtcbiAgICBpZiAoY2hhbmdlLmRvYyAmJiAhY2hhbmdlLmRvYy5fZGVsZXRlZCkgeyB0ZXN0Rm9yQ29tcGxldGVkKGNoYW5nZS5kb2MpIH1cbn1cblxuLy8gRmlsdGVyIGNvbXBsZXRlZCByZWNvcmRzXG5jb25zdCB0ZXN0Rm9yQ29tcGxldGVkID0gKGRvYykgPT4ge1xuICAgIGlmIChkb2Muc3RhdHVzICYmIChkb2Muc3RhdHVzID09PSAnY29tcGxldGVkJykpIHsgbW92ZVJlY29yZChkb2MpIH1cbn1cblxuLy8gTW92ZSByZWNvcmQgaW50byBjb21wbGV0ZWQgcXVldWVcbmNvbnN0IG1vdmVSZWNvcmQgPSAoZG9jKSA9PiB7XG4gICAgY29tcGxldGVkRGF0YWJhc2UuYWRkKGRvYylcbiAgICAgICAgLnRoZW4ocmVtb3ZlSWZOb0Vycm9yKGRvYy5faWQpKVxuICAgICAgICAudGhlbih3YXRjaGVkRGF0YWJhc2UucmVtb3ZlKGRvYy5faWQpKVxuICAgICAgICAudGhlbihjb25zb2xlLmxvZygnQXNzZXNzbWVudCAnICsgZG9jLl9pZCArICcgd2FzIGNvbXBsZXRlZCBhdCAnICsgbmV3IERhdGUoKS50b0lTT1N0cmluZygpKSlcbiAgICAgICAgLmNhdGNoKChlcnIpID0+IGNvbnNvbGUubG9nKCdDb21wbGV0ZWQgcmVjb3JkIHdhcyBub3QgbW92ZWQ6ICcsIGRvYy5faWQsICcgOiAnLCBlcnIpKVxufVxuXG4vLyBFbnN1cmUgdGhhdCByZWNvcmQgZXhpc3RzIGluIGNvbXBsZXRlZCBkYXRhYmFzZSBiZWZvcmUgcmVtb3ZpbmdcbmNvbnN0IHJlbW92ZUlmTm9FcnJvciA9IChpZCkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdmZXRjaGluZycsIGlkKVxuICAgICAgICBjb21wbGV0ZWREYXRhYmFzZS5mZXRjaChpZClcbiAgICAgICAgICAgIC50aGVuKGRvYyA9PiB7IHJldHVybiBkb2MgfSlcbiAgICAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7IHJlc29sdmUocmVzdWx0KSB9KVxuICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHsgcmVqZWN0KGVycikgfSlcbiAgICB9KVxufVxuXG4vLyBTdWJjcmliZSB0byBhbnkgY2hhbmdlcyBpbiB0aGUgbG9jYWwgZGF0YWJhc2VcbndhdGNoZWREYXRhYmFzZS5zdWJzY3JpYmUocHJvY2Vzc0NoYW5nZSlcblxuLy8gQ2FsbGluZyBTeW5jKCkgd2lsbCBncmFiIGEgZnVsbCBkYXRhc2V0IGZyb20gdGhlIHNlcnZlclxuLy8gYW5kIGNyZWF0ZSBhbiBvcGVuIGV2ZW50IGxpc3RlbmVyIHRoYXQga2VlcHMgdGhpcyBhcHAgYWxpdmVcbndhdGNoZWREYXRhYmFzZS5zeW5jKClcbmNvbXBsZXRlZERhdGFiYXNlLnN5bmMoKVxuXG5yZW1vdmVJZk5vRXJyb3IoJ2RvZXNub3RleGlzdCcpXG5cbmNvbnNvbGUubG9nKCdNRkEgUHJvY2Vzc2luZyBTZXJ2aWNlIFJ1bm5pbmcuLi4nKVxuIl19