#!/usr/bin/env node
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _sourceMapSupport = require('source-map-support');

var _couchService = require('./couchService');

var _couchService2 = _interopRequireDefault(_couchService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport.install)();
var config = require('config');


var watchedDatabaseList = [];

// Get the collection of databases to watch
var completedDatabase = new _couchService2.default('completed-visits');
completedDatabase.getUserDatabaseList().then(function (list) {
    start(list);
}).catch(function (err) {
    return console.log('Error: Unable to fetch list of user databases', err);
});

// TESTS
var removeTest = function removeTest(temp) {
    console.log('removing', temp.id);
    completedDatabase.remove(temp.id).then(function (doc) {
        return console.log(doc);
    }).catch(function (err) {
        return console.log(err);
    });
};

completedDatabase.add({ _id: new Date().toISOString(), name: 'Test', status: 'open' }).then(function (doc) {
    console.log(doc);removeTest(doc);
}).catch(function (err) {
    return console.log(err);
});

// END TESTS

var start = function start(watchList) {
    watchList.forEach(function (d) {
        watchedDatabaseList[d] = new _couchService2.default(d);
        watchedDatabaseList[d].subscribe(processChange, handleError);
    });
    console.log('MFA Processing Service Running...');
};

// Ignore deleted records
// change is always an array
var processChange = function processChange(change) {
    change.forEach(function (c) {
        if (!c._deleted) {
            testForCompleted(c);
        }
    });
};

// Filter completed records
var testForCompleted = function testForCompleted(doc) {
    if (doc.status && doc.status === 'completed') {
        console.log('Will move:', (0, _stringify2.default)(doc)); /*moveRecord(doc)*/
    }
};

// Move record into completed queue
var moveRecord = function moveRecord(doc) {
    completedDatabase.add(doc).then(removeIfNoError(doc.id)).catch(function (err) {
        return console.log('Error: Completed record could not be added: ', doc.id, ' : ', (0, _stringify2.default)(err));
    });
};

// Ensure that record exists in completed database before removing
var removeIfNoError = function removeIfNoError(id) {
    completedDatabase.fetch(id).then(function (doc) {
        watchedDatabaseList['database'].remove(id).then(console.log('Assessment ' + id + ' was completed at ' + new Date().toISOString()));
    }).catch(function (err) {
        return console.log('Error: Completed record could not be removed: ', id, ' : ', (0, _stringify2.default)(err));
    });
};

var handleError = function handleError(error) {
    console.log(error);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJyZXF1aXJlIiwid2F0Y2hlZERhdGFiYXNlTGlzdCIsImNvbXBsZXRlZERhdGFiYXNlIiwiZ2V0VXNlckRhdGFiYXNlTGlzdCIsInRoZW4iLCJzdGFydCIsImxpc3QiLCJjYXRjaCIsImNvbnNvbGUiLCJsb2ciLCJlcnIiLCJyZW1vdmVUZXN0IiwidGVtcCIsImlkIiwicmVtb3ZlIiwiZG9jIiwiYWRkIiwiX2lkIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwibmFtZSIsInN0YXR1cyIsIndhdGNoTGlzdCIsImZvckVhY2giLCJkIiwic3Vic2NyaWJlIiwicHJvY2Vzc0NoYW5nZSIsImhhbmRsZUVycm9yIiwiY2hhbmdlIiwiYyIsIl9kZWxldGVkIiwidGVzdEZvckNvbXBsZXRlZCIsIm1vdmVSZWNvcmQiLCJyZW1vdmVJZk5vRXJyb3IiLCJmZXRjaCIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7QUFHQTs7Ozs7O0FBRkE7QUFDQSxJQUFNQSxTQUFTQyxRQUFRLFFBQVIsQ0FBZjs7O0FBR0EsSUFBSUMsc0JBQXNCLEVBQTFCOztBQUVBO0FBQ0EsSUFBSUMsb0JBQW9CLDJCQUFpQixrQkFBakIsQ0FBeEI7QUFDQUEsa0JBQWtCQyxtQkFBbEIsR0FDS0MsSUFETCxDQUNVLGdCQUFRO0FBQUVDLFVBQU1DLElBQU47QUFBYSxDQURqQyxFQUVLQyxLQUZMLENBRVc7QUFBQSxXQUFPQyxRQUFRQyxHQUFSLENBQVksK0NBQVosRUFBNkRDLEdBQTdELENBQVA7QUFBQSxDQUZYOztBQUlBO0FBQ0EsSUFBTUMsYUFBYSxTQUFiQSxVQUFhLENBQUNDLElBQUQsRUFBVTtBQUN6QkosWUFBUUMsR0FBUixDQUFZLFVBQVosRUFBd0JHLEtBQUtDLEVBQTdCO0FBQ0FYLHNCQUFrQlksTUFBbEIsQ0FBeUJGLEtBQUtDLEVBQTlCLEVBQ0tULElBREwsQ0FDVTtBQUFBLGVBQU9JLFFBQVFDLEdBQVIsQ0FBWU0sR0FBWixDQUFQO0FBQUEsS0FEVixFQUVLUixLQUZMLENBRVc7QUFBQSxlQUFPQyxRQUFRQyxHQUFSLENBQVlDLEdBQVosQ0FBUDtBQUFBLEtBRlg7QUFHSCxDQUxEOztBQU9BUixrQkFBa0JjLEdBQWxCLENBQXNCLEVBQUVDLEtBQUssSUFBSUMsSUFBSixHQUFXQyxXQUFYLEVBQVAsRUFBaUNDLE1BQU0sTUFBdkMsRUFBK0NDLFFBQVEsTUFBdkQsRUFBdEIsRUFDS2pCLElBREwsQ0FDVSxlQUFPO0FBQUVJLFlBQVFDLEdBQVIsQ0FBWU0sR0FBWixFQUFrQkosV0FBV0ksR0FBWDtBQUFpQixDQUR0RCxFQUVLUixLQUZMLENBRVc7QUFBQSxXQUFPQyxRQUFRQyxHQUFSLENBQVlDLEdBQVosQ0FBUDtBQUFBLENBRlg7O0FBSUE7O0FBRUEsSUFBTUwsUUFBUSxTQUFSQSxLQUFRLENBQUNpQixTQUFELEVBQWU7QUFDekJBLGNBQVVDLE9BQVYsQ0FBa0IsYUFBSztBQUNuQnRCLDRCQUFvQnVCLENBQXBCLElBQXlCLDJCQUFpQkEsQ0FBakIsQ0FBekI7QUFDQXZCLDRCQUFvQnVCLENBQXBCLEVBQXVCQyxTQUF2QixDQUFpQ0MsYUFBakMsRUFBZ0RDLFdBQWhEO0FBQ0gsS0FIRDtBQUlBbkIsWUFBUUMsR0FBUixDQUFZLG1DQUFaO0FBQ0gsQ0FORDs7QUFRQTtBQUNBO0FBQ0EsSUFBTWlCLGdCQUFnQixTQUFoQkEsYUFBZ0IsQ0FBQ0UsTUFBRCxFQUFZO0FBQzlCQSxXQUFPTCxPQUFQLENBQWUsYUFBSztBQUNoQixZQUFJLENBQUNNLEVBQUVDLFFBQVAsRUFBaUI7QUFBRUMsNkJBQWlCRixDQUFqQjtBQUFxQjtBQUMzQyxLQUZEO0FBR0gsQ0FKRDs7QUFNQTtBQUNBLElBQU1FLG1CQUFtQixTQUFuQkEsZ0JBQW1CLENBQUNoQixHQUFELEVBQVM7QUFDOUIsUUFBSUEsSUFBSU0sTUFBSixJQUFlTixJQUFJTSxNQUFKLEtBQWUsV0FBbEMsRUFBZ0Q7QUFBRWIsZ0JBQVFDLEdBQVIsQ0FBWSxZQUFaLEVBQTBCLHlCQUFlTSxHQUFmLENBQTFCLEVBQUYsQ0FBZ0Q7QUFBcUI7QUFDeEgsQ0FGRDs7QUFJQTtBQUNBLElBQU1pQixhQUFhLFNBQWJBLFVBQWEsQ0FBQ2pCLEdBQUQsRUFBUztBQUN4QmIsc0JBQWtCYyxHQUFsQixDQUFzQkQsR0FBdEIsRUFDS1gsSUFETCxDQUNVNkIsZ0JBQWdCbEIsSUFBSUYsRUFBcEIsQ0FEVixFQUVLTixLQUZMLENBRVc7QUFBQSxlQUFPQyxRQUFRQyxHQUFSLENBQVksOENBQVosRUFBNERNLElBQUlGLEVBQWhFLEVBQW9FLEtBQXBFLEVBQTJFLHlCQUFlSCxHQUFmLENBQTNFLENBQVA7QUFBQSxLQUZYO0FBR0gsQ0FKRDs7QUFNQTtBQUNBLElBQU11QixrQkFBa0IsU0FBbEJBLGVBQWtCLENBQUNwQixFQUFELEVBQVE7QUFDNUJYLHNCQUFrQmdDLEtBQWxCLENBQXdCckIsRUFBeEIsRUFDS1QsSUFETCxDQUNVLGVBQU87QUFDVEgsNEJBQW9CLFVBQXBCLEVBQWdDYSxNQUFoQyxDQUF1Q0QsRUFBdkMsRUFDS1QsSUFETCxDQUNVSSxRQUFRQyxHQUFSLENBQVksZ0JBQWdCSSxFQUFoQixHQUFxQixvQkFBckIsR0FBNEMsSUFBSUssSUFBSixHQUFXQyxXQUFYLEVBQXhELENBRFY7QUFFSCxLQUpMLEVBS0taLEtBTEwsQ0FLVztBQUFBLGVBQU9DLFFBQVFDLEdBQVIsQ0FBWSxnREFBWixFQUE4REksRUFBOUQsRUFBa0UsS0FBbEUsRUFBeUUseUJBQWVILEdBQWYsQ0FBekUsQ0FBUDtBQUFBLEtBTFg7QUFNSCxDQVBEOztBQVNBLElBQU1pQixjQUFjLFNBQWRBLFdBQWMsQ0FBQ1EsS0FBRCxFQUFXO0FBQUUzQixZQUFRQyxHQUFSLENBQVkwQixLQUFaO0FBQW9CLENBQXJEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IGluc3RhbGwgfSBmcm9tICdzb3VyY2UtbWFwLXN1cHBvcnQnO1xyXG5pbnN0YWxsKCk7XHJcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xyXG5pbXBvcnQgQ291Y2hTZXJ2aWNlIGZyb20gJy4vY291Y2hTZXJ2aWNlJ1xyXG5cclxubGV0IHdhdGNoZWREYXRhYmFzZUxpc3QgPSBbXVxyXG5cclxuLy8gR2V0IHRoZSBjb2xsZWN0aW9uIG9mIGRhdGFiYXNlcyB0byB3YXRjaFxyXG5sZXQgY29tcGxldGVkRGF0YWJhc2UgPSBuZXcgQ291Y2hTZXJ2aWNlKCdjb21wbGV0ZWQtdmlzaXRzJylcclxuY29tcGxldGVkRGF0YWJhc2UuZ2V0VXNlckRhdGFiYXNlTGlzdCgpXHJcbiAgICAudGhlbihsaXN0ID0+IHsgc3RhcnQobGlzdCkgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiBVbmFibGUgdG8gZmV0Y2ggbGlzdCBvZiB1c2VyIGRhdGFiYXNlcycsIGVycikpXHJcblxyXG4vLyBURVNUU1xyXG5jb25zdCByZW1vdmVUZXN0ID0gKHRlbXApID0+IHtcclxuICAgIGNvbnNvbGUubG9nKCdyZW1vdmluZycsIHRlbXAuaWQpXHJcbiAgICBjb21wbGV0ZWREYXRhYmFzZS5yZW1vdmUodGVtcC5pZClcclxuICAgICAgICAudGhlbihkb2MgPT4gY29uc29sZS5sb2coZG9jKSlcclxuICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXHJcbn1cclxuXHJcbmNvbXBsZXRlZERhdGFiYXNlLmFkZCh7IF9pZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLCBuYW1lOiAnVGVzdCcsIHN0YXR1czogJ29wZW4nIH0pXHJcbiAgICAudGhlbihkb2MgPT4geyBjb25zb2xlLmxvZyhkb2MpOyByZW1vdmVUZXN0KGRvYykgfSlcclxuICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSlcclxuXHJcbi8vIEVORCBURVNUU1xyXG5cclxuY29uc3Qgc3RhcnQgPSAod2F0Y2hMaXN0KSA9PiB7XHJcbiAgICB3YXRjaExpc3QuZm9yRWFjaChkID0+IHtcclxuICAgICAgICB3YXRjaGVkRGF0YWJhc2VMaXN0W2RdID0gbmV3IENvdWNoU2VydmljZShkKVxyXG4gICAgICAgIHdhdGNoZWREYXRhYmFzZUxpc3RbZF0uc3Vic2NyaWJlKHByb2Nlc3NDaGFuZ2UsIGhhbmRsZUVycm9yKVxyXG4gICAgfSlcclxuICAgIGNvbnNvbGUubG9nKCdNRkEgUHJvY2Vzc2luZyBTZXJ2aWNlIFJ1bm5pbmcuLi4nKVxyXG59XHJcblxyXG4vLyBJZ25vcmUgZGVsZXRlZCByZWNvcmRzXHJcbi8vIGNoYW5nZSBpcyBhbHdheXMgYW4gYXJyYXlcclxuY29uc3QgcHJvY2Vzc0NoYW5nZSA9IChjaGFuZ2UpID0+IHtcclxuICAgIGNoYW5nZS5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgIGlmICghYy5fZGVsZXRlZCkgeyB0ZXN0Rm9yQ29tcGxldGVkKGMpIH1cclxuICAgIH0pXHJcbn1cclxuXHJcbi8vIEZpbHRlciBjb21wbGV0ZWQgcmVjb3Jkc1xyXG5jb25zdCB0ZXN0Rm9yQ29tcGxldGVkID0gKGRvYykgPT4ge1xyXG4gICAgaWYgKGRvYy5zdGF0dXMgJiYgKGRvYy5zdGF0dXMgPT09ICdjb21wbGV0ZWQnKSkgeyBjb25zb2xlLmxvZygnV2lsbCBtb3ZlOicsIEpTT04uc3RyaW5naWZ5KGRvYykpLyptb3ZlUmVjb3JkKGRvYykqLyB9XHJcbn1cclxuXHJcbi8vIE1vdmUgcmVjb3JkIGludG8gY29tcGxldGVkIHF1ZXVlXHJcbmNvbnN0IG1vdmVSZWNvcmQgPSAoZG9jKSA9PiB7XHJcbiAgICBjb21wbGV0ZWREYXRhYmFzZS5hZGQoZG9jKVxyXG4gICAgICAgIC50aGVuKHJlbW92ZUlmTm9FcnJvcihkb2MuaWQpKVxyXG4gICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yOiBDb21wbGV0ZWQgcmVjb3JkIGNvdWxkIG5vdCBiZSBhZGRlZDogJywgZG9jLmlkLCAnIDogJywgSlNPTi5zdHJpbmdpZnkoZXJyKSkpXHJcbn1cclxuXHJcbi8vIEVuc3VyZSB0aGF0IHJlY29yZCBleGlzdHMgaW4gY29tcGxldGVkIGRhdGFiYXNlIGJlZm9yZSByZW1vdmluZ1xyXG5jb25zdCByZW1vdmVJZk5vRXJyb3IgPSAoaWQpID0+IHtcclxuICAgIGNvbXBsZXRlZERhdGFiYXNlLmZldGNoKGlkKVxyXG4gICAgICAgIC50aGVuKGRvYyA9PiB7XHJcbiAgICAgICAgICAgIHdhdGNoZWREYXRhYmFzZUxpc3RbJ2RhdGFiYXNlJ10ucmVtb3ZlKGlkKVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oY29uc29sZS5sb2coJ0Fzc2Vzc21lbnQgJyArIGlkICsgJyB3YXMgY29tcGxldGVkIGF0ICcgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpKVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3I6IENvbXBsZXRlZCByZWNvcmQgY291bGQgbm90IGJlIHJlbW92ZWQ6ICcsIGlkLCAnIDogJywgSlNPTi5zdHJpbmdpZnkoZXJyKSkpXHJcbn1cclxuXHJcbmNvbnN0IGhhbmRsZUVycm9yID0gKGVycm9yKSA9PiB7IGNvbnNvbGUubG9nKGVycm9yKSB9XHJcbiJdfQ==