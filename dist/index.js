#!/usr/bin/env node
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _couchService = require('./couchService');

var _couchService2 = _interopRequireDefault(_couchService);

var _hexEncoder = require('./hexEncoder');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var config = require('config');
var winston = require('winston');
//import RestService from './restService'


// const restService = new RestService()

// Set up logging transports
var logFile = './logs/mfa-processor.log';
var logger = new winston.Logger({
    transports: [new winston.transports.Console(), new winston.transports.File({ filename: logFile })]
});
var watchedDatabaseList = [];

process.on('unhandledRejection', function (reason) {
    logger.log('error', 'DEBUG: Unhandled Rejection Reason', reason);
});
logger.log('info', 'START');

// Get the collection of databases to watch
var completedDatabase = new _couchService2.default('completed-visits');
completedDatabase.getUserDatabaseList().then(function (list) {
    start(list);
}).catch(function (err) {
    return logger.log('error', 'Error: Unable to fetch list of user databases', err);
});

// Store userdb instances in collection e.g. watchedDataBaseList[ 'userdb-xxxxxx', ... ]
var start = function start(watchList) {
    logger.log('info', 'Connected to ' + config.get('couchdb.remoteUrl'));
    watchList.forEach(function (d) {
        addWatchToDatabase(d);
    });
    watchForNewUsers();
    logger.log('info', 'MFA Processing Service Running...');
    // restService.start()
};

var addWatchToDatabase = function addWatchToDatabase(d) {
    watchedDatabaseList[d] = new _couchService2.default(d);
    watchedDatabaseList[d].subscribe(processChange, generalError);
    logger.log('info', 'Subscribed to', d);
};

var removeWatchFromDatabase = function removeWatchFromDatabase(d) {
    watchedDatabaseList[d].unsubscribe();
    watchedDatabaseList[d] = null;
    logger.log('info', 'Unsubscribed from', d);
};

// Add newly created user dbs to the watch list
var watchForNewUsers = function watchForNewUsers() {
    var success = function success(change) {
        change.forEach(function (c) {
            console.log(c.id);
            if (c.id.indexOf('org.couchdb.user:') > -1) {
                checkNameAgainstWatchList(c.id.replace('org.couchdb.user:', ''), c.deleted);
            }
        });
    };
    var error = function error(err) {
        logger.log('error', 'Error: Could not watch _users: ', (0, _stringify2.default)(err));
    };
    var users = new _couchService2.default('_users');
    users.subscribe(success, error, 'admin');
};

var checkNameAgainstWatchList = function checkNameAgainstWatchList(name, deleted) {
    var dbName = 'userdb-' + (0, _hexEncoder.hexEncode)(name);
    if (!deleted && watchedDatabaseList[dbName] === undefined) {
        addWatchToDatabase(dbName);
    }
    if (deleted && watchedDatabaseList[dbName] !== undefined) {
        removeWatchFromDatabase(dbName);
    }
};

// Ignore deleted records; [change] is always an array; 
// db is the database name, so we can remove doc later
var processChange = function processChange(change, db) {
    if (change) {
        change.forEach(function (c) {
            if (!c._deleted) {
                testForCompleted(c, db);
            }
        });
    }
};

// Filter only completed records
var testForCompleted = function testForCompleted(doc, db) {
    if (doc.status && doc.status === 'completed') {
        moveRecord(doc, db);
    }
};

// Move record into completed queue
var moveRecord = function moveRecord(doc, db) {
    var success = function success(doc) {
        removeIfNoError(doc.id, db);
    };
    var error = function error(err) {
        logger.log('error', 'Completed record could not be added:', (0, _stringify2.default)(err));
    };
    completedDatabase.add(doc, success, error);
};

// Ensure that record exists in completed database before removing
var removeIfNoError = function removeIfNoError(id, db) {
    var success = function success(doc) {
        remove(id, db);
    };
    var error = function error(err) {
        logger.log('error', 'Completed record ' + id + ' could not be found:', (0, _stringify2.default)(err));
    };
    completedDatabase.fetch(id, success, error);
};

var remove = function remove(id, db) {
    var success = function success(result) {
        logger.log('info', 'Assessment [' + id + '] was completed');
    };
    var error = function error(err) {
        logger.log('error', 'Completed record [' + id + '] could not be removed from', db, (0, _stringify2.default)(err));
    };
    watchedDatabaseList[db].remove(id, success, error);
};

var generalError = function generalError(err, database) {
    logger.log('error', database ? database : '', err);
};
//# sourceMappingURL=data:application/json;base64,