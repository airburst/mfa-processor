#!/usr/bin/env node
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _sourceMapSupport = require('source-map-support');

var _couchService = require('./couchService');

var _couchService2 = _interopRequireDefault(_couchService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport.install)();
var config = require('config');


var watchedDatabaseList = [];

process.on('unhandledRejection', function (reason) {
    console.log('DEBUG: Unhandled Rejection Reason: ' + reason);
});

// Get the collection of databases to watch
var completedDatabase = new _couchService2.default('completed-visits');
completedDatabase.purge(generalError, generalError);
completedDatabase.getUserDatabaseList().then(function (list) {/*start(list)*/}).catch(function (err) {
    return console.log('Error: Unable to fetch list of user databases', err);
});

// Store userdb instances in collection e.g. watchedDataBaseList[ 'userdb-xxxxxx', ... ]
var start = function start(watchList) {
    watchList.forEach(function (d) {
        watchedDatabaseList[d] = new _couchService2.default(d);
        watchedDatabaseList[d].subscribe(processChange, generalError);
    });
    console.log('MFA Processing Service Running...');
};

// Ignore deleted records; [change] is always an array; 
// db is the database name, so we can remove doc later
var processChange = function processChange(change, db) {
    change.forEach(function (c) {
        if (!c._deleted) {
            testForCompleted(c, db);
        }
    });
};

// Filter only completed records
var testForCompleted = function testForCompleted(doc, db) {
    if (doc.status && doc.status === 'completed') {
        moveRecord(doc, db);
    }
};

// Move record into completed queue
var moveRecord = function moveRecord(doc, db) {
    var success = function success(doc) {
        // console.log('DEBUG: Added doc to completed-visits', doc)
        removeIfNoError(doc.id, db);
    };
    var error = function error(err) {
        console.log('Error: Completed record could not be added: ', doc._id, ' : ', (0, _stringify2.default)(err));
    };
    completedDatabase.add(doc, success, error);
};

// Ensure that record exists in completed database before removing
var removeIfNoError = function removeIfNoError(id, db) {
    var success = function success(doc) {
        // console.log('DEBUG: Fetched doc from completed-visits', doc)
        remove(id, db);
    };
    var error = function error(err) {
        console.log('Error: Completed record could not be found: ', doc._id, ' : ', (0, _stringify2.default)(err));
    };
    completedDatabase.fetch(id, success, error);
};

var remove = function remove(id, db) {
    var success = function success(result) {
        console.log('Assessment ' + id + ' was completed at ' + new Date().toISOString());
    };
    var error = function error(err) {
        console.log('Error: Completed record', id, 'could not be removed from', db, (0, _stringify2.default)(err));
    };
    watchedDatabaseList[db].remove(id, success, error);
};

var generalError = function generalError(err) {
    console.log(err);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJyZXF1aXJlIiwid2F0Y2hlZERhdGFiYXNlTGlzdCIsInByb2Nlc3MiLCJvbiIsInJlYXNvbiIsImNvbnNvbGUiLCJsb2ciLCJjb21wbGV0ZWREYXRhYmFzZSIsInB1cmdlIiwiZ2VuZXJhbEVycm9yIiwiZ2V0VXNlckRhdGFiYXNlTGlzdCIsInRoZW4iLCJjYXRjaCIsImVyciIsInN0YXJ0Iiwid2F0Y2hMaXN0IiwiZm9yRWFjaCIsImQiLCJzdWJzY3JpYmUiLCJwcm9jZXNzQ2hhbmdlIiwiY2hhbmdlIiwiZGIiLCJjIiwiX2RlbGV0ZWQiLCJ0ZXN0Rm9yQ29tcGxldGVkIiwiZG9jIiwic3RhdHVzIiwibW92ZVJlY29yZCIsInN1Y2Nlc3MiLCJyZW1vdmVJZk5vRXJyb3IiLCJpZCIsImVycm9yIiwiX2lkIiwiYWRkIiwicmVtb3ZlIiwiZmV0Y2giLCJyZXN1bHQiLCJEYXRlIiwidG9JU09TdHJpbmciXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBOztBQUdBOzs7Ozs7QUFGQTtBQUNBLElBQU1BLFNBQVNDLFFBQVEsUUFBUixDQUFmOzs7QUFHQSxJQUFJQyxzQkFBc0IsRUFBMUI7O0FBRUFDLFFBQVFDLEVBQVIsQ0FBVyxvQkFBWCxFQUFpQyxVQUFDQyxNQUFELEVBQVk7QUFDNUNDLFlBQVFDLEdBQVIsQ0FBWSx3Q0FBd0NGLE1BQXBEO0FBQ0EsQ0FGRDs7QUFJQTtBQUNBLElBQUlHLG9CQUFvQiwyQkFBaUIsa0JBQWpCLENBQXhCO0FBQ0FBLGtCQUFrQkMsS0FBbEIsQ0FBd0JDLFlBQXhCLEVBQXNDQSxZQUF0QztBQUNBRixrQkFBa0JHLG1CQUFsQixHQUNLQyxJQURMLENBQ1UsZ0JBQVEsQ0FBRSxlQUFpQixDQURyQyxFQUVLQyxLQUZMLENBRVc7QUFBQSxXQUFPUCxRQUFRQyxHQUFSLENBQVksK0NBQVosRUFBNkRPLEdBQTdELENBQVA7QUFBQSxDQUZYOztBQUlBO0FBQ0EsSUFBTUMsUUFB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QVIsQ0FBWU8sR0FBWjtBQUFrQixDQUFsRCIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBpbnN0YWxsIH0gZnJvbSAnc291cmNlLW1hcC1zdXBwb3J0JztcclxuaW5zdGFsbCgpO1xyXG5jb25zdCBjb25maWcgPSByZXF1aXJlKCdjb25maWcnKTtcclxuaW1wb3J0IENvdWNoU2VydmljZSBmcm9tICcuL2NvdWNoU2VydmljZSdcclxuXHJcbmxldCB3YXRjaGVkRGF0YWJhc2VMaXN0ID0gW11cclxuXHJcbnByb2Nlc3Mub24oJ3VuaGFuZGxlZFJlamVjdGlvbicsIChyZWFzb24pID0+IHtcclxuXHRjb25zb2xlLmxvZygnREVCVUc6IFVuaGFuZGxlZCBSZWplY3Rpb24gUmVhc29uOiAnICsgcmVhc29uKTtcclxufSk7XHJcblxyXG4vLyBHZXQgdGhlIGNvbGxlY3Rpb24gb2YgZGF0YWJhc2VzIHRvIHdhdGNoXHJcbmxldCBjb21wbGV0ZWREYXRhYmFzZSA9IG5ldyBDb3VjaFNlcnZpY2UoJ2NvbXBsZXRlZC12aXNpdHMnKVxyXG5jb21wbGV0ZWREYXRhYmFzZS5wdXJnZShnZW5lcmFsRXJyb3IsIGdlbmVyYWxFcnJvcilcclxuY29tcGxldGVkRGF0YWJhc2UuZ2V0VXNlckRhdGFiYXNlTGlzdCgpXHJcbiAgICAudGhlbihsaXN0ID0+IHsgLypzdGFydChsaXN0KSovIH0pXHJcbiAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvcjogVW5hYmxlIHRvIGZldGNoIGxpc3Qgb2YgdXNlciBkYXRhYmFzZXMnLCBlcnIpKVxyXG5cclxuLy8gU3RvcmUgdXNlcmRiIGluc3RhbmNlcyBpbiBjb2xsZWN0aW9uIGUuZy4gd2F0Y2hlZERhdGFCYXNlTGlzdFsgJ3VzZXJkYi14eHh4eHgnLCAuLi4gXVxyXG5jb25zdCBzdGFydCA9ICh3YXRjaExpc3QpID0+IHtcclxuICAgIHdhdGNoTGlzdC5mb3JFYWNoKGQgPT4ge1xyXG4gICAgICAgIHdhdGNoZWREYXRhYmFzZUxpc3RbZF0gPSBuZXcgQ291Y2hTZXJ2aWNlKGQpXHJcbiAgICAgICAgd2F0Y2hlZERhdGFiYXNlTGlzdFtkXS5zdWJzY3JpYmUocHJvY2Vzc0NoYW5nZSwgZ2VuZXJhbEVycm9yKVxyXG4gICAgfSlcclxuICAgIGNvbnNvbGUubG9nKCdNRkEgUHJvY2Vzc2luZyBTZXJ2aWNlIFJ1bm5pbmcuLi4nKVxyXG59XHJcblxyXG4vLyBJZ25vcmUgZGVsZXRlZCByZWNvcmRzOyBbY2hhbmdlXSBpcyBhbHdheXMgYW4gYXJyYXk7IFxyXG4vLyBkYiBpcyB0aGUgZGF0YWJhc2UgbmFtZSwgc28gd2UgY2FuIHJlbW92ZSBkb2MgbGF0ZXJcclxuY29uc3QgcHJvY2Vzc0NoYW5nZSA9IChjaGFuZ2UsIGRiKSA9PiB7XHJcbiAgICBjaGFuZ2UuZm9yRWFjaChjID0+IHtcclxuICAgICAgICBpZiAoIWMuX2RlbGV0ZWQpIHsgdGVzdEZvckNvbXBsZXRlZChjLCBkYikgfVxyXG4gICAgfSlcclxufVxyXG5cclxuLy8gRmlsdGVyIG9ubHkgY29tcGxldGVkIHJlY29yZHNcclxuY29uc3QgdGVzdEZvckNvbXBsZXRlZCA9IChkb2MsIGRiKSA9PiB7XHJcbiAgICBpZiAoZG9jLnN0YXR1cyAmJiAoZG9jLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpKSB7IG1vdmVSZWNvcmQoZG9jLCBkYikgfVxyXG59XHJcblxyXG4vLyBNb3ZlIHJlY29yZCBpbnRvIGNvbXBsZXRlZCBxdWV1ZVxyXG5jb25zdCBtb3ZlUmVjb3JkID0gKGRvYywgZGIpID0+IHtcclxuICAgIGNvbnN0IHN1Y2Nlc3MgPSAoZG9jKSA9PiB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0RFQlVHOiBBZGRlZCBkb2MgdG8gY29tcGxldGVkLXZpc2l0cycsIGRvYylcclxuICAgICAgICByZW1vdmVJZk5vRXJyb3IoZG9jLmlkLCBkYilcclxuICAgIH1cclxuICAgIGNvbnN0IGVycm9yID0gKGVycikgPT4geyBjb25zb2xlLmxvZygnRXJyb3I6IENvbXBsZXRlZCByZWNvcmQgY291bGQgbm90IGJlIGFkZGVkOiAnLCBkb2MuX2lkLCAnIDogJywgSlNPTi5zdHJpbmdpZnkoZXJyKSkgfVxyXG4gICAgY29tcGxldGVkRGF0YWJhc2UuYWRkKGRvYywgc3VjY2VzcywgZXJyb3IpXHJcbn1cclxuXHJcbi8vIEVuc3VyZSB0aGF0IHJlY29yZCBleGlzdHMgaW4gY29tcGxldGVkIGRhdGFiYXNlIGJlZm9yZSByZW1vdmluZ1xyXG5jb25zdCByZW1vdmVJZk5vRXJyb3IgPSAoaWQsIGRiKSA9PiB7XHJcbiAgICBjb25zdCBzdWNjZXNzID0gKGRvYykgPT4ge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdERUJVRzogRmV0Y2hlZCBkb2MgZnJvbSBjb21wbGV0ZWQtdmlzaXRzJywgZG9jKVxyXG4gICAgICAgIHJlbW92ZShpZCwgZGIpXHJcbiAgICB9XHJcbiAgICBjb25zdCBlcnJvciA9IChlcnIpID0+IHsgY29uc29sZS5sb2coJ0Vycm9yOiBDb21wbGV0ZWQgcmVjb3JkIGNvdWxkIG5vdCBiZSBmb3VuZDogJywgZG9jLl9pZCwgJyA6ICcsIEpTT04uc3RyaW5naWZ5KGVycikpIH1cclxuICAgIGNvbXBsZXRlZERhdGFiYXNlLmZldGNoKGlkLCBzdWNjZXNzLCBlcnJvcilcclxufVxyXG5cclxuY29uc3QgcmVtb3ZlID0gKGlkLCBkYikgPT4ge1xyXG4gICAgY29uc3Qgc3VjY2VzcyA9IChyZXN1bHQpID0+IHsgY29uc29sZS5sb2coJ0Fzc2Vzc21lbnQgJyArIGlkICsgJyB3YXMgY29tcGxldGVkIGF0ICcgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpIH1cclxuICAgIGNvbnN0IGVycm9yID0gKGVycikgPT4geyBjb25zb2xlLmxvZygnRXJyb3I6IENvbXBsZXRlZCByZWNvcmQnLCBpZCwgJ2NvdWxkIG5vdCBiZSByZW1vdmVkIGZyb20nLCBkYiwgSlNPTi5zdHJpbmdpZnkoZXJyKSkgfVxyXG4gICAgd2F0Y2hlZERhdGFiYXNlTGlzdFtkYl0ucmVtb3ZlKGlkLCBzdWNjZXNzLCBlcnJvcilcclxufVxyXG5cclxuY29uc3QgZ2VuZXJhbEVycm9yID0gKGVycikgPT4geyBjb25zb2xlLmxvZyhlcnIpIH1cclxuIl19