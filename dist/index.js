#!/usr/bin/env node
'use strict';

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _sourceMapSupport = require('source-map-support');

var _couchService = require('./couchService');

var _pouchService = require('./pouchService');

var _pouchService2 = _interopRequireDefault(_pouchService);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport.install)();
var config = require('config');


var user = config.get('couchdb.user');
var pass = config.get('couchdb.password');
var completedDb = config.get('couchdb.completedDb');
var remoteServer = config.get('couchdb.remoteServer');
//const remoteServerWithCreds = `http://${user}:${pass}@${remoteServer}`
var watchedDatabaseList = [];

// Get the collection of databases to watch
var makeCollection = function makeCollection(docs) {
    var userDbList = [];
    userDbList = docs.map(function (d) {
        return d.id;
    });
    if (userDbList.length > 0) {
        start(userDbList);
    }
};

(0, _couchService.getUserDatabaseList)(makeCollection);

var start = function start(watchList) {
    var completedDatabase = new _pouchService2.default(completedDb, remoteServer);
    completedDatabase.sync();

    watchedDatabaseList = watchList.map(function (d) {
        return new _pouchService2.default(d, remoteServer);
    });
    watchedDatabaseList.forEach(function (w) {
        w.subscribe(processChange);
        w.sync();
    });

    console.log('MFA Processing Service Running...');
};

// Ignore deleted records
var processChange = function processChange(change, db) {
    console.log('processing', change, db); //
    if (change.doc && !change.doc._deleted) {
        testForCompleted(change.doc, db);
    }
};

// Filter completed records
var testForCompleted = function testForCompleted(doc, db) {
    if (doc.status && doc.status === 'completed') {
        moveRecord(doc, db);
    }
};

// Move record into completed queue
var moveRecord = function moveRecord(doc, db) {
    var addDoc = (0, _assign2.default)({}, doc, { _rev: undefined });
    completedDatabase.add(addDoc).then(removeIfNoError(doc._id, db)).catch(function (err) {
        return console.log('Error: Completed record could not be added: ', doc._id, ' : ', (0, _stringify2.default)(err));
    });
};

// Ensure that record exists in completed database before removing
var removeIfNoError = function removeIfNoError(id, db) {
    index = watchedDatabaseList.indexOf(db);
    completedDatabase.fetch(id).then(function (doc) {
        watchedDatabaseList[index].remove(doc._id).then(console.log('Assessment ' + doc._id + ' was completed at ' + new Date().toISOString()));
    }).catch(function (err) {
        return console.log('Error: Completed record could not be removed: ', id, ' : ', (0, _stringify2.default)(err));
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJyZXF1aXJlIiwidXNlciIsImdldCIsInBhc3MiLCJjb21wbGV0ZWREYiIsInJlbW90ZVNlcnZlciIsIndhdGNoZWREYXRhYmFzZUxpc3QiLCJtYWtlQ29sbGVjdGlvbiIsImRvY3MiLCJ1c2VyRGJMaXN0IiwibWFwIiwiZCIsImlkIiwibGVuZ3RoIiwic3RhcnQiLCJ3YXRjaExpc3QiLCJjb21wbGV0ZWREYXRhYmFzZSIsInN5bmMiLCJmb3JFYWNoIiwidyIsInN1YnNjcmliZSIsInByb2Nlc3NDaGFuZ2UiLCJjb25zb2xlIiwibG9nIiwiY2hhbmdlIiwiZGIiLCJkb2MiLCJfZGVsZXRlZCIsInRlc3RGb3JDb21wbGV0ZWQiLCJzdGF0dXMiLCJtb3ZlUmVjb3JkIiwiYWRkRG9jIiwiX3JldiIsInVuZGVmaW5lZCIsImFkZCIsInRoZW4iLCJyZW1vdmVJZk5vRXJyb3IiLCJfaWQiLCJjYXRjaCIsImVyciIsImluZGV4IiwiaW5kZXhPZiIsImZldGNoIiwicmVtb3ZlIiwiRGF0ZSIsInRvSVNPU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQ0E7O0FBR0E7O0FBQ0E7Ozs7OztBQUhBO0FBQ0EsSUFBTUEsU0FBU0MsUUFBUSxRQUFSLENBQWY7OztBQUlBLElBQU1DLE9BQU9GLE9BQU9HLEdBQVAsQ0FBVyxjQUFYLENBQWI7QUFDQSxJQUFNQyxPQUFPSixPQUFPRyxHQUFQLENBQVcsa0JBQVgsQ0FBYjtBQUNBLElBQU1FLGNBQWNMLE9BQU9HLEdBQVAsQ0FBVyxxQkFBWCxDQUFwQjtBQUNBLElBQU1HLGVBQWVOLE9BQU9HLEdBQVAsQ0FBVyxzQkFBWCxDQUFyQjtBQUNBO0FBQ0EsSUFBSUksc0JBQXNCLEVBQTFCOztBQUVBO0FBQ0EsSUFBTUMsaUJBQWlCLFNBQWpCQSxjQUFpQixDQUFDQyxJQUFELEVBQVU7QUFDN0IsUUFBSUMsYUFBYSxFQUFqQjtBQUNBQSxpQkFBYUQsS0FBS0UsR0FBTCxDQUFTO0FBQUEsZUFBS0MsRUFBRUMsRUFBUDtBQUFBLEtBQVQsQ0FBYjtBQUNBLFFBQUlILFdBQVdJLE1BQVgsR0FBb0IsQ0FBeEIsRUFBMkI7QUFBRUMsY0FBTUwsVUFBTjtBQUFtQjtBQUNuRCxDQUpEOztBQU1BLHVDQUFvQkYsY0FBcEI7O0FBRUEsSUFBTU8sUUFBUSxTQUFSQSxLQUFRLENBQUNDLFNBQUQsRUFBZTtBQUN6QixRQUFNQyxvQkFBb0IsMkJBQWlCWixXQUFqQixFQUE4QkMsWUFBOUIsQ0FBMUI7QUFDQVcsc0JBQWtCQyxJQUFsQjs7QUFFQVgsMEJBQXNCUyxVQUFVTCxHQUFWLENBQWM7QUFBQSxlQUFLLDJCQUFpQkMsQ0FBakIsRUFBb0JOLFlBQXBCLENBQUw7QUFBQSxLQUFkLENBQXRCO0FBQ0FDLHdCQUFvQlksT0FBcEIsQ0FBNEIsYUFBSztBQUM3QkMsVUFBRUMsU0FBRixDQUFZQyxhQUFaO0FBQ0FGLFVBQUVGLElBQUY7QUFDSCxLQUhEOztBQUtBSyxZQUFRQyxHQUFSLENBQVksbUNBQVo7QUFDSCxDQVhEOztBQWFBO0FBQ0EsSUFBTUYsZ0JBQWdCLFNBQWhCQSxhQUFnQixDQUFDRyxNQUFELEVBQVNDLEVBQVQsRUFBZ0I7QUFDbENILFlBQVFDLEdBQVIsQ0FBWSxZQUFaLEVBQTBCQyxNQUExQixFQUFrQ0MsRUFBbEMsRUFEa0MsQ0FDVTtBQUM1QyxRQUFJRCxPQUFPRSxHQUFQLElBQWMsQ0FBQ0YsT0FBT0UsR0FBUCxDQUFXQyxRQUE5QixFQUF3QztBQUFFQyx5QkFBaUJKLE9BQU9FLEdBQXhCLEVBQTZCRCxFQUE3QjtBQUFrQztBQUMvRSxDQUhEOztBQUtBO0FBQ0EsSUFBTUcsbUJBQW1CLFNBQW5CQSxnQkFBbUIsQ0FBQ0YsR0FBRCxFQUFNRCxFQUFOLEVBQWE7QUFDbEMsUUFBSUMsSUFBSUcsTUFBSixJQUFlSCxJQUFJRyxNQUFKLEtBQWUsV0FBbEMsRUFBZ0Q7QUFBRUMsbUJBQVdKLEdBQVgsRUFBZ0JELEVBQWhCO0FBQXFCO0FBQzFFLENBRkQ7O0FBSUE7QUFDQSxJQUFNSyxhQUFhLFNBQWJBLFVBQWEsQ0FBQ0osR0FBRCxFQUFNRCxFQUFOLEVBQWE7QUFDL0IsUUFBSU0sU0FBUyxzQkFBYyxFQUFkLEVBQWtCTCxHQUFsQixFQUF1QixFQUFFTSxNQUFNQyxTQUFSLEVBQXZCLENBQWI7QUFDR2pCLHNCQUFrQmtCLEdBQWxCLENBQXNCSCxNQUF0QixFQUNLSSxJQURMLENBQ1VDLGdCQUFnQlYsSUFBSVcsR0FBcEIsRUFBeUJaLEVBQXpCLENBRFYsRUFFS2EsS0FGTCxDQUVXO0FBQUEsZUFBT2hCLFFBQVFDLEdBQVIsQ0FBWSw4Q0FBWixFQUE0REcsSUFBSVcsR0FBaEUsRUFBcUUsS0FBckUsRUFBNEUseUJBQWVFLEdBQWYsQ0FBNUUsQ0FBUDtBQUFBLEtBRlg7QUFHSCxDQUxEOztBQU9BO0FBQ0EsSUFBTUgsa0JBQWtCLFNBQWxCQSxlQUFrQixDQUFDeEIsRUFBRCxFQUFLYSxFQUFMLEVBQVk7QUFDaENlLFlBQVFsQyxvQkFBb0JtQyxPQUFwQixDQUE0QmhCLEVBQTVCLENBQVI7QUFDQVQsc0JBQWtCMEIsS0FBbEIsQ0FBd0I5QixFQUF4QixFQUNLdUIsSUFETCxDQUNVLGVBQU87QUFDVDdCLDRCQUFvQmtDLEtBQXBCLEVBQTJCRyxNQUEzQixDQUFrQ2pCLElBQUlXLEdBQXRDLEVBQ0tGLElBREwsQ0FDVWIsUUFBUUMsR0FBUixDQUFZLGdCQUFnQkcsSUFBSVcsR0FBcEIsR0FBMEIsb0JBQTFCLEdBQWlELElBQUlPLElBQUosR0FBV0MsV0FBWCxFQUE3RCxDQURWO0FBRUgsS0FKTCxFQUtLUCxLQUxMLENBS1c7QUFBQSxlQUFPaEIsUUFBUUMsR0FBUixDQUFZLGdEQUFaLEVBQThEWCxFQUE5RCxFQUFrRSxLQUFsRSxFQUF5RSx5QkFBZTJCLEdBQWYsQ0FBekUsQ0FBUDtBQUFBLEtBTFg7QUFNSCxDQVJEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBpbnN0YWxsIH0gZnJvbSAnc291cmNlLW1hcC1zdXBwb3J0Jztcbmluc3RhbGwoKTtcbmNvbnN0IGNvbmZpZyA9IHJlcXVpcmUoJ2NvbmZpZycpO1xuaW1wb3J0IHsgZ2V0VXNlckRhdGFiYXNlTGlzdCB9IGZyb20gJy4vY291Y2hTZXJ2aWNlJ1xuaW1wb3J0IFBvdWNoU2VydmljZSBmcm9tICcuL3BvdWNoU2VydmljZSdcblxuY29uc3QgdXNlciA9IGNvbmZpZy5nZXQoJ2NvdWNoZGIudXNlcicpXG5jb25zdCBwYXNzID0gY29uZmlnLmdldCgnY291Y2hkYi5wYXNzd29yZCcpXG5jb25zdCBjb21wbGV0ZWREYiA9IGNvbmZpZy5nZXQoJ2NvdWNoZGIuY29tcGxldGVkRGInKVxuY29uc3QgcmVtb3RlU2VydmVyID0gY29uZmlnLmdldCgnY291Y2hkYi5yZW1vdGVTZXJ2ZXInKVxuLy9jb25zdCByZW1vdGVTZXJ2ZXJXaXRoQ3JlZHMgPSBgaHR0cDovLyR7dXNlcn06JHtwYXNzfUAke3JlbW90ZVNlcnZlcn1gXG5sZXQgd2F0Y2hlZERhdGFiYXNlTGlzdCA9IFtdXG5cbi8vIEdldCB0aGUgY29sbGVjdGlvbiBvZiBkYXRhYmFzZXMgdG8gd2F0Y2hcbmNvbnN0IG1ha2VDb2xsZWN0aW9uID0gKGRvY3MpID0+IHtcbiAgICBsZXQgdXNlckRiTGlzdCA9IFtdXG4gICAgdXNlckRiTGlzdCA9IGRvY3MubWFwKGQgPT4gZC5pZClcbiAgICBpZiAodXNlckRiTGlzdC5sZW5ndGggPiAwKSB7IHN0YXJ0KHVzZXJEYkxpc3QpIH1cbn1cblxuZ2V0VXNlckRhdGFiYXNlTGlzdChtYWtlQ29sbGVjdGlvbilcblxuY29uc3Qgc3RhcnQgPSAod2F0Y2hMaXN0KSA9PiB7XG4gICAgY29uc3QgY29tcGxldGVkRGF0YWJhc2UgPSBuZXcgUG91Y2hTZXJ2aWNlKGNvbXBsZXRlZERiLCByZW1vdGVTZXJ2ZXIpXG4gICAgY29tcGxldGVkRGF0YWJhc2Uuc3luYygpXG4gICAgXG4gICAgd2F0Y2hlZERhdGFiYXNlTGlzdCA9IHdhdGNoTGlzdC5tYXAoZCA9PiBuZXcgUG91Y2hTZXJ2aWNlKGQsIHJlbW90ZVNlcnZlcikpXG4gICAgd2F0Y2hlZERhdGFiYXNlTGlzdC5mb3JFYWNoKHcgPT4ge1xuICAgICAgICB3LnN1YnNjcmliZShwcm9jZXNzQ2hhbmdlKVxuICAgICAgICB3LnN5bmMoKVxuICAgIH0pXG5cbiAgICBjb25zb2xlLmxvZygnTUZBIFByb2Nlc3NpbmcgU2VydmljZSBSdW5uaW5nLi4uJylcbn1cblxuLy8gSWdub3JlIGRlbGV0ZWQgcmVjb3Jkc1xuY29uc3QgcHJvY2Vzc0NoYW5nZSA9IChjaGFuZ2UsIGRiKSA9PiB7XG4gICAgY29uc29sZS5sb2coJ3Byb2Nlc3NpbmcnLCBjaGFuZ2UsIGRiKSAgICAgICAvL1xuICAgIGlmIChjaGFuZ2UuZG9jICYmICFjaGFuZ2UuZG9jLl9kZWxldGVkKSB7IHRlc3RGb3JDb21wbGV0ZWQoY2hhbmdlLmRvYywgZGIpIH1cbn1cblxuLy8gRmlsdGVyIGNvbXBsZXRlZCByZWNvcmRzXG5jb25zdCB0ZXN0Rm9yQ29tcGxldGVkID0gKGRvYywgZGIpID0+IHtcbiAgICBpZiAoZG9jLnN0YXR1cyAmJiAoZG9jLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcpKSB7IG1vdmVSZWNvcmQoZG9jLCBkYikgfVxufVxuXG4vLyBNb3ZlIHJlY29yZCBpbnRvIGNvbXBsZXRlZCBxdWV1ZVxuY29uc3QgbW92ZVJlY29yZCA9IChkb2MsIGRiKSA9PiB7XG5cdGxldCBhZGREb2MgPSBPYmplY3QuYXNzaWduKHt9LCBkb2MsIHsgX3JldjogdW5kZWZpbmVkIH0pXG4gICAgY29tcGxldGVkRGF0YWJhc2UuYWRkKGFkZERvYylcbiAgICAgICAgLnRoZW4ocmVtb3ZlSWZOb0Vycm9yKGRvYy5faWQsIGRiKSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3I6IENvbXBsZXRlZCByZWNvcmQgY291bGQgbm90IGJlIGFkZGVkOiAnLCBkb2MuX2lkLCAnIDogJywgSlNPTi5zdHJpbmdpZnkoZXJyKSkpXG59XG5cbi8vIEVuc3VyZSB0aGF0IHJlY29yZCBleGlzdHMgaW4gY29tcGxldGVkIGRhdGFiYXNlIGJlZm9yZSByZW1vdmluZ1xuY29uc3QgcmVtb3ZlSWZOb0Vycm9yID0gKGlkLCBkYikgPT4ge1xuICAgIGluZGV4ID0gd2F0Y2hlZERhdGFiYXNlTGlzdC5pbmRleE9mKGRiKVxuICAgIGNvbXBsZXRlZERhdGFiYXNlLmZldGNoKGlkKVxuICAgICAgICAudGhlbihkb2MgPT4geyBcbiAgICAgICAgICAgIHdhdGNoZWREYXRhYmFzZUxpc3RbaW5kZXhdLnJlbW92ZShkb2MuX2lkKVxuICAgICAgICAgICAgICAgIC50aGVuKGNvbnNvbGUubG9nKCdBc3Nlc3NtZW50ICcgKyBkb2MuX2lkICsgJyB3YXMgY29tcGxldGVkIGF0ICcgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpKVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKCdFcnJvcjogQ29tcGxldGVkIHJlY29yZCBjb3VsZCBub3QgYmUgcmVtb3ZlZDogJywgaWQsICcgOiAnLCBKU09OLnN0cmluZ2lmeShlcnIpKSlcbn1cbiJdfQ==