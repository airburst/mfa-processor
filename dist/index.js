#!/usr/bin/env node
'use strict';

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _sourceMapSupport = require('source-map-support');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _sourceMapSupport.install)();

var PouchService = require('./pouchService'),
    remoteServer = 'http://couchdb.fairhursts.net:5984',
    watchedDb = 'visits',
    completedDb = 'completed-visits';

var watchedDatabase = new PouchService(watchedDb, remoteServer); //TODO: handle as array
var completedDatabase = new PouchService(completedDb, remoteServer);

// Ignore deleted records
var processChange = function processChange(change) {
    if (change.doc && !change.doc._deleted) {
        testForCompleted(change.doc);
    }
};

// Filter completed records
var testForCompleted = function testForCompleted(doc) {
    if (doc.status && doc.status === 'completed') {
        moveRecord(doc);
    }
};

// Move record into completed queue
var moveRecord = function moveRecord(doc) {
    completedDatabase.add(doc).then(removeIfNoError(doc._id)).then(watchedDatabase.remove(doc._id)).then(console.log('Assessment ' + doc._id + ' was completed at ' + new Date().toISOString())).catch(function (err) {
        return console.log('Completed record was not moved: ', doc._id, ' : ', err);
    });
};

// Ensure that record exists in completed database before removing
var removeIfNoError = function removeIfNoError(id) {
    return new _promise2.default(function (resolve, reject) {
        completedDatabase.fetch(id).then(function (doc) {
            return doc;
        }).then(function (result) {
            resolve(result);
        }).catch(function (err) {
            reject(err);
        });
    });
};

// Subcribe to any changes in the local database
watchedDatabase.subscribe(processChange);

// Calling Sync() will grab a full dataset from the server
// and create an open event listener that keeps this app alive
watchedDatabase.sync();
completedDatabase.sync();

console.log('MFA Processing Service Running...');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJQb3VjaFNlcnZpY2UiLCJyZXF1aXJlIiwicmVtb3RlU2VydmVyIiwid2F0Y2hlZERiIiwiY29tcGxldGVkRGIiLCJ3YXRjaGVkRGF0YWJhc2UiLCJjb21wbGV0ZWREYXRhYmFzZSIsInByb2Nlc3NDaGFuZ2UiLCJjaGFuZ2UiLCJkb2MiLCJfZGVsZXRlZCIsInRlc3RGb3JDb21wbGV0ZWQiLCJzdGF0dXMiLCJtb3ZlUmVjb3JkIiwiYWRkIiwidGhlbiIsInJlbW92ZUlmTm9FcnJvciIsIl9pZCIsInJlbW92ZSIsImNvbnNvbGUiLCJsb2ciLCJEYXRlIiwidG9JU09TdHJpbmciLCJjYXRjaCIsImVyciIsImlkIiwicmVzb2x2ZSIsInJlamVjdCIsImZldGNoIiwicmVzdWx0Iiwic3Vic2NyaWJlIiwic3luYyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0E7Ozs7QUFDQTs7QUFFQSxJQUFNQSxlQUFlQyxRQUFRLGdCQUFSLENBQXJCO0FBQUEsSUFDSUMsZUFBZSxvQ0FEbkI7QUFBQSxJQUVJQyxZQUFZLFFBRmhCO0FBQUEsSUFHSUMsY0FBYyxrQkFIbEI7O0FBS0EsSUFBTUMsa0JBQWtCLElBQUlMLFlBQUosQ0FBaUJHLFNBQWpCLEVBQTRCRCxZQUE1QixDQUF4QixDLENBQXdFO0FBQ3hFLElBQU1JLG9CQUFvQixJQUFJTixZQUFKLENBQWlCSSxXQUFqQixFQUE4QkYsWUFBOUIsQ0FBMUI7O0FBRUE7QUFDQSxJQUFNSyxnQkFBZ0IsU0FBaEJBLGFBQWdCLENBQUNDLE1BQUQsRUFBWTtBQUM5QixRQUFJQSxPQUFPQyxHQUFQLElBQWMsQ0FBQ0QsT0FBT0MsR0FBUCxDQUFXQyxRQUE5QixFQUF3QztBQUFFQyx5QkFBaUJILE9BQU9DLEdBQXhCO0FBQThCO0FBQzNFLENBRkQ7O0FBSUE7QUFDQSxJQUFNRSxtQkFBbUIsU0FBbkJBLGdCQUFtQixDQUFDRixHQUFELEVBQVM7QUFDOUIsUUFBSUEsSUFBSUcsTUFBSixJQUFlSCxJQUFJRyxNQUFKLEtBQWUsV0FBbEMsRUFBZ0Q7QUFBRUMsbUJBQVdKLEdBQVg7QUFBaUI7QUFDdEUsQ0FGRDs7QUFJQTtBQUNBLElBQU1JLGFBQWEsU0FBYkEsVUFBYSxDQUFDSixHQUFELEVBQVM7QUFDeEJILHNCQUFrQlEsR0FBbEIsQ0FBc0JMLEdBQXRCLEVBQ0tNLElBREwsQ0FDVUMsZ0JBQWdCUCxJQUFJUSxHQUFwQixDQURWLEVBRUtGLElBRkwsQ0FFVVYsZ0JBQWdCYSxNQUFoQixDQUF1QlQsSUFBSVEsR0FBM0IsQ0FGVixFQUdLRixJQUhMLENBR1VJLFFBQVFDLEdBQVIsQ0FBWSxnQkFBZ0JYLElBQUlRLEdBQXBCLEdBQTBCLG9CQUExQixHQUFpRCxJQUFJSSxJQUFKLEdBQVdDLFdBQVgsRUFBN0QsQ0FIVixFQUlLQyxLQUpMLENBSVcsVUFBQ0MsR0FBRDtBQUFBLGVBQVNMLFFBQVFDLEdBQVIsQ0FBWSxrQ0FBWixFQUFnRFgsSUFBSVEsR0FBcEQsRUFBeUQsS0FBekQsRUFBZ0VPLEdBQWhFLENBQVQ7QUFBQSxLQUpYO0FBS0gsQ0FORDs7QUFRQTtBQUNBLElBQU1SLGtCQUFrQixTQUFsQkEsZUFBa0IsQ0FBQ1MsRUFBRCxFQUFRO0FBQzVCLFdBQU8sc0JBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3BDckIsMEJBQWtCc0IsS0FBbEIsQ0FBd0JILEVBQXhCLEVBQ0tWLElBREwsQ0FDVSxlQUFPO0FBQUUsbUJBQU9OLEdBQVA7QUFBWSxTQUQvQixFQUVLTSxJQUZMLENBRVUsa0JBQVU7QUFBRVcsb0JBQVFHLE1BQVI7QUFBaUIsU0FGdkMsRUFHS04sS0FITCxDQUdXLFVBQUNDLEdBQUQsRUFBUztBQUFFRyxtQkFBT0gsR0FBUDtBQUFhLFNBSG5DO0FBSUgsS0FMTSxDQUFQO0FBTUgsQ0FQRDs7QUFTQTtBQUNBbkIsZ0JBQWdCeUIsU0FBaEIsQ0FBMEJ2QixhQUExQjs7QUFFQTtBQUNBO0FBQ0FGLGdCQUFnQjBCLElBQWhCO0FBQ0F6QixrQkFBa0J5QixJQUFsQjs7QUFFQVosUUFBUUMsR0FBUixDQUFZLG1DQUFaIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBpbnN0YWxsIH0gZnJvbSAnc291cmNlLW1hcC1zdXBwb3J0Jztcbmluc3RhbGwoKTtcblxuY29uc3QgUG91Y2hTZXJ2aWNlID0gcmVxdWlyZSgnLi9wb3VjaFNlcnZpY2UnKSxcbiAgICByZW1vdGVTZXJ2ZXIgPSAnaHR0cDovL2NvdWNoZGIuZmFpcmh1cnN0cy5uZXQ6NTk4NCcsXG4gICAgd2F0Y2hlZERiID0gJ3Zpc2l0cycsXG4gICAgY29tcGxldGVkRGIgPSAnY29tcGxldGVkLXZpc2l0cydcblxuY29uc3Qgd2F0Y2hlZERhdGFiYXNlID0gbmV3IFBvdWNoU2VydmljZSh3YXRjaGVkRGIsIHJlbW90ZVNlcnZlcikgICAgICAgLy9UT0RPOiBoYW5kbGUgYXMgYXJyYXlcbmNvbnN0IGNvbXBsZXRlZERhdGFiYXNlID0gbmV3IFBvdWNoU2VydmljZShjb21wbGV0ZWREYiwgcmVtb3RlU2VydmVyKVxuXG4vLyBJZ25vcmUgZGVsZXRlZCByZWNvcmRzXG5jb25zdCBwcm9jZXNzQ2hhbmdlID0gKGNoYW5nZSkgPT4ge1xuICAgIGlmIChjaGFuZ2UuZG9jICYmICFjaGFuZ2UuZG9jLl9kZWxldGVkKSB7IHRlc3RGb3JDb21wbGV0ZWQoY2hhbmdlLmRvYykgfVxufVxuXG4vLyBGaWx0ZXIgY29tcGxldGVkIHJlY29yZHNcbmNvbnN0IHRlc3RGb3JDb21wbGV0ZWQgPSAoZG9jKSA9PiB7XG4gICAgaWYgKGRvYy5zdGF0dXMgJiYgKGRvYy5zdGF0dXMgPT09ICdjb21wbGV0ZWQnKSkgeyBtb3ZlUmVjb3JkKGRvYykgfVxufVxuXG4vLyBNb3ZlIHJlY29yZCBpbnRvIGNvbXBsZXRlZCBxdWV1ZVxuY29uc3QgbW92ZVJlY29yZCA9IChkb2MpID0+IHtcbiAgICBjb21wbGV0ZWREYXRhYmFzZS5hZGQoZG9jKVxuICAgICAgICAudGhlbihyZW1vdmVJZk5vRXJyb3IoZG9jLl9pZCkpXG4gICAgICAgIC50aGVuKHdhdGNoZWREYXRhYmFzZS5yZW1vdmUoZG9jLl9pZCkpXG4gICAgICAgIC50aGVuKGNvbnNvbGUubG9nKCdBc3Nlc3NtZW50ICcgKyBkb2MuX2lkICsgJyB3YXMgY29tcGxldGVkIGF0ICcgKyBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkpKVxuICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5sb2coJ0NvbXBsZXRlZCByZWNvcmQgd2FzIG5vdCBtb3ZlZDogJywgZG9jLl9pZCwgJyA6ICcsIGVycikpXG59XG5cbi8vIEVuc3VyZSB0aGF0IHJlY29yZCBleGlzdHMgaW4gY29tcGxldGVkIGRhdGFiYXNlIGJlZm9yZSByZW1vdmluZ1xuY29uc3QgcmVtb3ZlSWZOb0Vycm9yID0gKGlkKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29tcGxldGVkRGF0YWJhc2UuZmV0Y2goaWQpXG4gICAgICAgICAgICAudGhlbihkb2MgPT4geyByZXR1cm4gZG9jIH0pXG4gICAgICAgICAgICAudGhlbihyZXN1bHQgPT4geyByZXNvbHZlKHJlc3VsdCkgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7IHJlamVjdChlcnIpIH0pXG4gICAgfSlcbn1cblxuLy8gU3ViY3JpYmUgdG8gYW55IGNoYW5nZXMgaW4gdGhlIGxvY2FsIGRhdGFiYXNlXG53YXRjaGVkRGF0YWJhc2Uuc3Vic2NyaWJlKHByb2Nlc3NDaGFuZ2UpXG5cbi8vIENhbGxpbmcgU3luYygpIHdpbGwgZ3JhYiBhIGZ1bGwgZGF0YXNldCBmcm9tIHRoZSBzZXJ2ZXJcbi8vIGFuZCBjcmVhdGUgYW4gb3BlbiBldmVudCBsaXN0ZW5lciB0aGF0IGtlZXBzIHRoaXMgYXBwIGFsaXZlXG53YXRjaGVkRGF0YWJhc2Uuc3luYygpXG5jb21wbGV0ZWREYXRhYmFzZS5zeW5jKClcblxuY29uc29sZS5sb2coJ01GQSBQcm9jZXNzaW5nIFNlcnZpY2UgUnVubmluZy4uLicpXG4iXX0=